// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.2
//
// <auto-generated>
//
// Generated from file `call_interface.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package com.cloudzero.arch.ice;

import Ice.IPConnectionInfo;
import com.cloudzero.arch.comm.ReturnCode;
import com.cloudzero.arch.ice.generate._DIceCallerDisp;
import com.cloudzero.arch.pb.CloudRequest;
import com.cloudzero.arch.pb.CloudResponse;
import com.cloudzero.arch.xwork.Dispatcher;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public final class DIceCallerI extends _DIceCallerDisp {
    private static final Logger LOGGER = LoggerFactory.getLogger(DIceCallerI.class);

    /**
     * 请求分发
     *
     * @param request
     * @param __current
     * @return
     */
    public CloudResponse invoke(CloudRequest request, Ice.Current __current) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Receive request from " + ((IPConnectionInfo) __current.con.getInfo()).remoteAddress + ":" + ((IPConnectionInfo) __current.con.getInfo()).remotePort);
        }
        if (ServerCfgHelper.NG_NAME.equals(request.getNgLabel()) && ServerCfgHelper.NG_VERSION.equals(request.getNgVersion())) {
            return Dispatcher.invoke(request);
        } else {
            LOGGER.warn("ngLabel:" + request.getNgLabel() + " or ngVersion:" + request.getNgVersion() + " does not match");
            CloudResponse.Builder builder = CloudResponse.newBuilder()
                    .setReturnCode(ReturnCode.CZ000002.name())
                    .setDescription(ReturnCode.CZ000002.toString());
            return builder.build();
        }
    }

    /**
     * 请求分发
     *
     * @param request
     * @param __current
     * @return
     */
    public void call(CloudRequest request, Ice.Current __current) {
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("Receive request from " + ((IPConnectionInfo) __current.con.getInfo()).remoteAddress + ":" + ((IPConnectionInfo) __current.con.getInfo()).remotePort);
        }
        if (ServerCfgHelper.NG_NAME.equals(request.getNgLabel()) && ServerCfgHelper.NG_VERSION.equals(request.getNgVersion())) {
            Dispatcher.send(request);
        } else {
            LOGGER.warn("ngLabel:" + request.getNgLabel() + " or ngVersion:" + request.getNgVersion() + " does not match");
        }
    }

}
